@inject ContextService context;
@implements IDisposable;
<input class="@CssClass" placeholder="@SourceInvariantComparer.NoSource(Boon?.Name)" title="Name" @bind="Value" />

@code {
	[Parameter]
	public string? CssClass { get; set; } = "border-0 w-100 text-inherit fw-inherit visible-placeholder";

	[Parameter]
	public ChangeType EventMask { get; set; } = ChangeType.Full;

	[Parameter]
	public ChangeType EventType { get; set; } = ChangeType.Features;

	[Parameter]
	public JournalBoon? Boon { get; set; }

	private string? Value { get => Boon?.DisplayName; set => Set(value); }

	protected override Task OnInitializedAsync()
	{
		context.PlayerChange += StateChange;
		return Task.CompletedTask;
	}

	private async void Set(string? v)
	{
		if (Boon is null) return;
		context.Context.MakeHistory("");
		if (string.IsNullOrWhiteSpace(v)) Boon.DisplayName = null;
		else Boon.DisplayName = v;
		await context.NotifyPlayerChange(EventType);
	}

	private async Task StateChange(ChangeType change)
	{
		if (change.HasAnyFlag(EventMask, EventType)) await InvokeAsync(() =>
			{
				StateHasChanged();
			});
	}

	public void Dispose() => context.PlayerChange -= StateChange;
}
