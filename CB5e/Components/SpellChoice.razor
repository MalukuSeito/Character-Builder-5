@inject ContextService context;
@implements IDisposable;

@if (Feature is not null) {
	var levels = Available.Select(s => s.Level).Distinct().Order().ToList();
	<div class="@TitleCssClass">@Feature.Name
		@if(Amount > 1)
		{
			<span class="text-muted"> (@Choices.Count / @Amount)</span>
		}
		<Tag Xml="new FeatureContainer((new List<Feature>() {Feature}).Union(Features?.Where(f=>f is ModifySpellChoiceFeature msf && msf.UniqueID == Feature.UniqueID || f is IncreaseSpellChoiceAmountFeature isf && isf.UniqueID == Feature.UniqueID || f is BonusSpellPrepareFeature bsf && bsf.AddTo == PreparationMode.ClassList && bsf.Matches(SpellcastingID ?? Feature.SpellcastingID)) ?? new List<Feature>()))" />
	</div>
	<ul class="@CssClass">
		@if (Choices.Count < Amount)
		{
			<li class="@LineCssClass bg-primary"><input type="search" class="border-0 rounded-2 w-50 visible-placeholder bg-body" placeholder="Search" @bind="SearchText" @bind:event="oninput" /></li>
		}
		@foreach(var level in levels) {
			@if (levels.Count > 1)
			{
				<li class="@LineCssClass text-primary fs-5 bg-body-secondary">
					@if (level == 0) {
						@:Cantrips
					}
					else
					{
						@:Level @level
					}
				</li>
			}
			@foreach (var spell in Available.Where(s=>s.Level == level).Where(s => string.IsNullOrWhiteSpace(SearchText) || s.Matches(SearchText, false)))
			{

				@if (Choices.Count < Amount || Choices.Contains(spell, ConfigManager.SourceAwareComparer))
				{
					<li class="@LineCssClass">
						<button class="btn @(Choices.Count < Amount ? Choices.Contains(spell, ConfigManager.SourceAwareComparer) ? "btn-secondary-outline" : Choices.Contains(spell) ? "btn-secondary" : "btn-primary" : "btn-primary-outline") me-3 py-0 my-0 bi @(Choices.Contains(spell, ConfigManager.SourceAwareComparer) ? "bi-check-circle-fill active" : "bi-check-circle")" @onclick="async () => await Select(spell)" title="Select" />
						<span class="@NameCssClass @(Choices.Contains(spell) ? "text-muted" : "") cursor-pointer" @onclick="()=>Selected = Selected == spell ? null : spell">@spell.Name</span><Tag Xml="spell" />
						@if (spell.Level > 0)
						{
							<span class="text-muted"> Level @spell.Level</span>
						}
						else
						{
							<span class="text-muted"> Cantrip </span>
						}
						<span class="@SourceCssClass"> (@spell.Source)</span>
						@if (Selected == spell)
						{
							<p class="fst-italic">@spell.Desc</p>
							<p class="mb-0"><span class="fw-bold">Casting Time: </span>@spell.CastingTime</p>
							<p class="mb-0"><span class="fw-bold">Range: </span>@spell.Range</p>
							<p class="mb-0"><span class="fw-bold">Duration: </span>@spell.Duration</p>
							<p>
								@foreach (var line in spell.Description?.Split("\n") ?? new string[] { })
								{
									@line

									<br />
								}
							</p>
							<Descriptions Items="spell.Descriptions" />
						}
					</li>
				}
			}
		}
		@foreach (var choice in Choices.Where(c => !Available.Contains(c)))
		{
			<li class="@LineCssClass text-danger">
				<button class="btn btn-danger me-3 py-0 my-0 bi bi-check-circle-fill active" @onclick="async () => await Remove(choice)" title="Remove Invalid Choice" />
				<span class="@NameCssClass text-danger">@choice.Name</span>
			</li>
		}
	</ul>
}

@code {
	private string SearchText { get; set; } = "";

	[Parameter]
	public string? CssClass { get; set; } = "list-group mb-3";

	[Parameter]
	public string? TitleCssClass { get; set; } = "text-primary fs-4 fw-bold";

	[Parameter]
	public string? LineCssClass { get; set; } = "list-group-item";

	[Parameter]
	public string? ButtonCssClass { get; set; } = "";

	[Parameter]
	public string? NameCssClass { get; set; } = "fw-bold";

	[Parameter]
	public string? TagClass { get; set; }

	[Parameter]
	public string? SourceCssClass { get; set; } = "text-muted fs--1";

	[Parameter]
	public SpellChoiceFeature? Feature { get; set; }

	[Parameter]
	public List<Feature>? Features { get; set; }

	[Parameter]
	public string? SpellcastingID { get; set; }

	[Parameter]
	public Spell? Selected { get; set; }

	[Parameter]
	public int? ClassLevel { get; set; }

	[Parameter]
	public ChangeType EventMask { get; set; } = ChangeType.Full | ChangeType.Features;

	[Parameter]
	public ChangeType EventType { get; set; } = ChangeType.Spells;

	private List<Spell> Available { get; set; } = new();

	private List<Spell> Choices { get; set; } = new();

	private int Amount { get; set; } = 0;

	protected override Task OnInitializedAsync()
	{
		context.PlayerChange += StateChange;
		BuildChoices();
		return Task.CompletedTask;
	}

	private async Task Remove(Spell spell)
	{
		if (Feature is null) return;
		var choice = spell.Name + " " + ConfigManager.SourceSeperator + " " + spell.Source;
		var sc = context.Context.Player.GetSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID);
		context.Context.MakeHistory("");
		sc.Choices.Remove(choice);
		context.Context.Player.ModifiedSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID);
		await SaveChoices();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		BuildChoices();
	}

	private async Task Select(Spell spell)
	{
		if (Feature is null) return;
		var choice = spell.Name + " " + ConfigManager.SourceSeperator + " " + spell.Source;
		var sc = context.Context.Player.GetSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID);
		if (!Choices.Exists(c=>ConfigManager.SourceInvariantComparer.Equals(c, choice)))
		{
			if (sc.Choices.Count < Amount)
			{
				context.Context.MakeHistory("");
				sc.Choices.Add(choice);
				context.Context.Player.ModifiedSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID);
			}
		}
		else
		{
			context.Context.MakeHistory("");
			sc.Choices.RemoveAll(t => ConfigManager.SourceInvariantComparer.Equals(t, choice));
			context.Context.Player.ModifiedSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID);
		}
		await SaveChoices();
	}

	private async Task SaveChoices()
	{
		await context.NotifyPlayerChange(EventType);
	}

	private void BuildChoices()
	{
		if (Feature is null) return;
		Choices.Clear();
		Available.Clear();
		Amount = Feature.Amount;
		Available.AddRange(Utils.FilterSpell(context.Context, Feature.AvailableSpellChoices, SpellcastingID ?? Feature.SpellcastingID, ClassLevel ?? context.Context.Player.GetClassLevel(SpellcastingID ?? Feature.SpellcastingID, context.Level)));
		foreach (Feature f in Features ?? context.Context.Player.GetFeatures().Where(f =>f is ModifySpellChoiceFeature || f is IncreaseSpellChoiceAmountFeature || f is BonusSpellPrepareFeature))
		{
			if (f is ModifySpellChoiceFeature msf && msf.UniqueID == Feature.UniqueID)
			{
				if (msf.AdditionalSpells is not null) Available.AddRange(msf.AdditionalSpells.Select(s => context.Context.GetSpell(s, msf.Source)));
				if (!string.IsNullOrWhiteSpace(msf.AdditionalSpellChoices)) Available.AddRange(Utils.FilterSpell(context.Context, msf.AdditionalSpellChoices, SpellcastingID ?? Feature.SpellcastingID, ClassLevel ?? context.Context.Player.GetClassLevel(SpellcastingID ?? Feature.SpellcastingID, context.Level)));
			}
			else if (f is BonusSpellPrepareFeature bspf && bspf.Matches(SpellcastingID ?? Feature.SpellcastingID) && bspf.AddTo == PreparationMode.ClassList)
			{
				foreach (string s in bspf.Spells)
				{
					Available.Add(new ModifiedSpell(context.Context.GetSpell(s, bspf.Source), bspf.KeywordsToAdd, false, false));
				}
				Available.AddRange(Utils.FilterSpell(context.Context, bspf.Condition, SpellcastingID ?? Feature.SpellcastingID).Select(s => new ModifiedSpell(s, bspf.KeywordsToAdd, false, false)));
			}
			else if (f is IncreaseSpellChoiceAmountFeature ispcaf && ispcaf.UniqueID == Feature.UniqueID) Amount += ispcaf.Amount;
		}
		Available.Sort();
		Choices.AddRange(context.Context.Player.GetSpellChoice(SpellcastingID ?? Feature.SpellcastingID, Feature.UniqueID).Choices.Select(s=>context.Context.GetSpell(s, Feature.Source)));
	}

	private async Task StateChange(ChangeType change)
	{
		if (change.HasAnyFlag(EventMask, EventType)) await InvokeAsync(() =>
			{
				BuildChoices();
				StateHasChanged();
			});
	}

	public void Dispose() => context.PlayerChange -= StateChange;
}
