@inject ContextService context;
@implements IDisposable;
<div class="@CssClass">
	<input type="number" class="@InputCssClass" @bind="Value" min="0" max="@Info?.Count" />
	<button class="@ReloadCssClass" @onclick="Reset" title="Reset" />
</div>

@code {
	[Parameter]
	public string? CssClass { get; set; }

	[Parameter]
	public string? InputCssClass { get; set; } = "border-0 w-100 text-inherit fw-inherit";

	[Parameter]
	public string? ReloadCssClass { get; set; } = "reset bi bi-bootstrap-reboot";

	private string? v;
	private string? Value { get => v; set => v=value; }

	[Parameter]
	public ChangeType EventMask { get; set; } = ChangeType.Full | ChangeType.Features;

	[Parameter]
	public ChangeType EventType { get; set; } = ChangeType.Resources;

	[Parameter]
	public ResourcesInfo.Info? Info { get; set; }

	protected override Task OnInitializedAsync()
	{
		if (Info is not null) {
			v = (Info?.Count - context.Context.Player.GetUsedResources(Info?.ResInfo?.ResourceID ?? Info?.ModifiedSpell?.getResourceID() ?? "")).ToString();
		}
		context.PlayerChange += StateChange;
		return Task.CompletedTask;
	}

	private async Task StateChange(ChangeType change)
	{
		if (change.HasAnyFlag(EventType, EventMask)) await InvokeAsync(() =>
			{
				v = (Info?.Count - context.Context.Player.GetUsedResources(Info?.ResInfo?.ResourceID ?? Info?.ModifiedSpell?.getResourceID() ?? "")).ToString();
				StateHasChanged();
			});
	}

	private async void Reset()
	{
		string? id = Info?.ResInfo?.ResourceID ?? Info?.ModifiedSpell?.getResourceID();
		if (id is not null)
		{
			context.Context.MakeHistory("Resource" + id);
			context.Context.Player.SetUsedResources(id, 0);
			await context.NotifyPlayerChange(EventType);
		}
	}

	private async void Update()
	{
		string? id = Info?.ResInfo?.ResourceID ?? Info?.ModifiedSpell?.getResourceID();
		if (id is not null)
		{
			context.Context.MakeHistory("Resource" + id);
			if (string.IsNullOrEmpty(v)) return;
			int val = 0;
			int max = Info?.Count ?? 1;
			if (v.StartsWith("+") && int.TryParse(v.Substring(1), out int added)) val = context.Context.Player.GetUsedResources(id) - added;
			else if (int.TryParse(v, out int parsed))
			{
				if (parsed < 0) val = context.Context.Player.GetUsedResources(id) - parsed;
				else val = max - parsed;
			}
			else return;
			context.Context.Player.SetUsedResources(id, Math.Max(0, Math.Min(max, val)));
			await context.NotifyPlayerChange(EventType);
		}
	}
	public void Dispose() => context.PlayerChange -= StateChange;
}
