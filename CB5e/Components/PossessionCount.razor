@inject ContextService context;
@implements IDisposable;
<input type="number" class="@CssClass" placeholder="1" title="Count" @bind="Value" />

@code {
	[Parameter]
	public string? CssClass { get; set; } = "border-0 w-100 text-end fw-inherit visible-placeholder";

	[Parameter]
	public ChangeType EventMask { get; set; } = ChangeType.Full;

	[Parameter]
	public ChangeType EventType { get; set; } = ChangeType.Inventory;

	[Parameter]
	public Possession? Possession { get; set; }

	private int Value { get => Possession?.Count ?? 1; set => Set(value); }

	protected override Task OnInitializedAsync()
	{
		context.PlayerChange += StateChange;
		return Task.CompletedTask;
	}

	private async void Set(int v)
	{
		if (Possession is null) return;
		context.Context.MakeHistory("PossesionCount");
		if (Possession is JournalPossession)
		{
			Possession.Count = v;
		}
		else context.Context.Player.ChangePossessionAmountAndAddRemoveItemsAccordingly(Possession, v);
		await context.NotifyPlayerChange(EventType);
	}

	private async Task StateChange(ChangeType change)
	{
		if (change.HasAnyFlag(EventMask, EventType)) await InvokeAsync(() =>
			{
				StateHasChanged();
			});
	}

	public void Dispose() => context.PlayerChange -= StateChange;
}
