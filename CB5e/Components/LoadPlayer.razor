@inject ContextService context;
@inject ConfigService config;
@inject ContextService context;
@inject SourceService sources;
@inject IBlazorDbFactory dbFactory;
@inject IJSRuntime JSRuntime;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;
<InputFile class="@CssClass" OnChange="@Load" />

@code {
	[Parameter]
	public string? CssClass { get; set; }

	private byte[]? image;
	private byte[]? factionImage;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./Components/{GetType().Name}.razor.js");
			var self = DotNetObjectReference.Create(this);
			if (await sessionStorage.GetItemAsync<byte[]>("AutoSave") is byte[] saved)
			{
				try
				{
					using MemoryStream mem = new(saved);
					Player? p = Player.Serializer.Deserialize(mem) as Player;
					if (p is not null) {
						p.Portrait = await sessionStorage.GetItemAsync<byte[]>("AutoSavePortrait");
						p.FactionImage = await sessionStorage.GetItemAsync<byte[]>("AutoSaveFactionImage");
						await config.LoadConfig();
						await LoadAsync(p, p.FilePath);
					}
				} catch (Exception e)
				{
					ConfigManager.LogError(e);
				}
			}
			else
			{
				await module.InvokeVoidAsync("initLaunchQueue", self);
			}
		}
		context.PlayerChange += StateChange;
		await base.OnAfterRenderAsync(firstRender);
	}

	private Task StateChange(ChangeType change)
	{
		if (context?.Context?.Player is Player p)
		{
			using MemoryStream mem = new();
			byte[] port = p.Portrait;
			byte[] fac = p.FactionImage;
			p.Portrait = null;
			p.FactionImage = null;
			Player.Serializer.Serialize(mem, p);
			p.Portrait = port;
			p.FactionImage = fac;
			sessionStorage.SetItemAsync("AutoSave", mem.ToArray());
			if (image != p.Portrait)
			{
				image = p.Portrait;
				sessionStorage.SetItemAsync("AutoSavePortrait", image);
			}
			if (factionImage != p.FactionImage)
			{
				factionImage = p.FactionImage;
				sessionStorage.SetItemAsync("AutoSaveFactionImage", factionImage);
			}
		}
		return Task.CompletedTask;
	}

	[JSInvokableAttribute("LoadFile")]
	public async Task LoadFile(string data, string name)
	{
		await config.LoadConfig();
		using TextReader reader = new StringReader(data);
		var p = Player.Serializer.Deserialize(reader) as Player;
		await LoadAsync(p, name);
	}

	private async Task Load(InputFileChangeEventArgs e)
	{
		await config.LoadConfig();
		using var stream = e.File.OpenReadStream(100 * 1024 * 1024);
		using MemoryStream ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		ms.Seek(0, SeekOrigin.Begin);
		var p = Player.Serializer.Deserialize(ms) as Player;
		await LoadAsync(p, e.File.Name);
	}

	private async Task LoadAsync(Player? p, object path)
	{
		if (p is Player)
		{
			if (sources.Sources.Count == 0) await sources.FindAsync(dbFactory);
			p.Context = await context.CreateContext(config, p.ExcludedSources);
			p.Context.Player = p;
			context.Level = p.GetLevel();
			foreach (Spellcasting sc in p.Spellcasting) sc.PostLoad(p.GetLevel());
			p.FilePath = path;
			await context.NotifyPlayerChange(ChangeType.Full);
		}
	}
}
