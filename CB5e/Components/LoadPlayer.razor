@inject ContextService context;
@inject ConfigService config;
@inject ContextService context;
@inject SourceService sources;
@inject IBlazorDbFactory dbFactory;
<InputFile class="@CssClass" OnChange="@Load" />

@code {
	[Parameter]
	public string? CssClass { get; set; }

	private async Task Load(InputFileChangeEventArgs e)
	{
		await config.LoadConfig();
		using var stream = e.File.OpenReadStream(100 * 1024 * 1024);
		using MemoryStream ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		ms.Seek(0, SeekOrigin.Begin);
		var p = Player.Serializer.Deserialize(ms) as Player;
		if (p is Player)
		{
			if (sources.Sources.Count == 0) await sources.FindAsync(dbFactory);
			p.Context = await context.CreateContext(config, p.ExcludedSources);
			p.Context.Player = p;
			context.Level = p.GetLevel();
			foreach (Spellcasting sc in p.Spellcasting) sc.PostLoad(p.GetLevel());
			p.FilePath = e.File.Name;
			await context.NotifyPlayerChange(ChangeType.Full);
		}
	}
}
